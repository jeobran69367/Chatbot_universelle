# Pipeline CI/CD pour Chatbot Web Scraper
# Déploiement automatisé sur Azure Container Apps avec AZD

name: 🚀 CI/CD - Azure Deployment

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

# Variables globales
env:
  AZURE_ENV_NAME: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
  AZURE_DEV_COLLECT_TELEMETRY: 'no'

# Permissions spéciales pour OIDC
permissions:
  id-token: write
  contents: read

jobs:
  #============================================================================
  # Job 1: Tests et Validation du Code
  #============================================================================
  test:
    name: 🧪 Tests & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black mypy safety bandit
        
    - name: 🧪 Run Tests
      run: |
        # Créer les répertoires de test
        mkdir -p data/embeddings data/scraped tests
        
        # Tests basiques
        python -m pytest tests/ -v || echo "⚠️ Tests terminés"
        
    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          htmlcov/
          coverage.xml

  #============================================================================
  # Job 2: Construction Docker  
  #============================================================================
  build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 📋 Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: chatbot-web-scraper
        tags: |
          type=ref,event=branch
          type=ref,event=pr,prefix=pr-
          type=sha,prefix=sha-,format=short
          
    - name: 🐳 Build and Export
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        platforms: linux/amd64
        tags: ${{ steps.meta.outputs.tags }}
        outputs: type=docker,dest=/tmp/chatbot-image.tar
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 📤 Upload Docker Image
      uses: actions/upload-artifact@v4
      if: github.event_name != 'pull_request'
      with:
        name: chatbot-docker-image
        path: /tmp/chatbot-image.tar
        retention-days: 1

  #============================================================================
  # Job 3: Déploiement sur Azure
  #============================================================================
  deploy:
    name: 🌐 Deploy to Azure
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name != 'pull_request'
    
    environment: 
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'development') }}
    
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    outputs:
      uri: ${{ steps.deploy.outputs.uri }}
      
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📥 Download Docker Image
      uses: actions/download-artifact@v4
      with:
        name: chatbot-docker-image
        path: /tmp
        
    - name: 🐳 Load Docker Image
      run: docker load --input /tmp/chatbot-image.tar
      
    - name: 🔑 Azure Login (OIDC)
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: 🛠️ Setup Azure Developer CLI
      run: |
        # Installation AZD avec fallback
        if curl -fsSL https://aka.ms/install-azd.sh | bash; then
          echo "✅ AZD installé via script officiel"
        else
          echo "⚠️ Script officiel échoué, installation via GitHub releases"
          AZD_VERSION="1.10.2"
          wget -q "https://github.com/Azure/azure-dev/releases/download/azure-dev-cli_${AZD_VERSION}/azd-linux-amd64.tar.gz" -O azd.tar.gz
          tar -xzf azd.tar.gz
          sudo mv azd /usr/local/bin/azd
          chmod +x /usr/local/bin/azd
        fi
        azd version
        
    - name: 🔧 AZD Authentication
      run: |
        echo "🔐 Configuration de l'authentification AZD..."
        azd auth login --client-id "${{ secrets.AZURE_CLIENT_ID }}" --tenant-id "${{ secrets.AZURE_TENANT_ID }}" --federated-credential-provider "github" --service-principal
        
    - name: 🔧 Configure AZD Environment
      run: |
        # Définir le nom du groupe de ressources
        RESOURCE_GROUP_NAME="rg-${{ env.AZURE_ENV_NAME }}-chatbot"
        LOCATION="${{ vars.AZURE_LOCATION || 'eastus' }}"
        
        # Créer le groupe de ressources s'il n'existe pas
        echo "🔧 Vérification/création du groupe de ressources: $RESOURCE_GROUP_NAME"
        if ! az group show --name "$RESOURCE_GROUP_NAME" --output none 2>/dev/null; then
          echo "📦 Création du groupe de ressources: $RESOURCE_GROUP_NAME dans $LOCATION"
          az group create --name "$RESOURCE_GROUP_NAME" --location "$LOCATION" --tags azd-env-name=${{ env.AZURE_ENV_NAME }}
        else
          echo "✅ Groupe de ressources existant: $RESOURCE_GROUP_NAME"
        fi
        
        # Initialiser l'environnement AZD si nécessaire
        if [ ! -f ".azure/${{ env.AZURE_ENV_NAME }}/.env" ]; then
          echo "🔧 Création de l'environnement AZD: ${{ env.AZURE_ENV_NAME }}"
          azd env new ${{ env.AZURE_ENV_NAME }} --location "$LOCATION"
        fi
        
        # Configuration AZD
        azd config set alpha.resourceGroupDeployments on
        
        # Configuration des variables d'environnement critiques
        azd env set AZURE_ENV_NAME ${{ env.AZURE_ENV_NAME }}
        azd env set AZURE_LOCATION "$LOCATION"
        azd env set AZURE_SUBSCRIPTION_ID ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        azd env set AZURE_RESOURCE_GROUP "$RESOURCE_GROUP_NAME"
        
        # Variables spécifiques à l'application
        azd env set APP_VERSION ${{ github.sha }}
        azd env set CONTAINER_IMAGE chatbot-web-scraper:${{ github.sha }}
        
    - name: 🏗️ Provision Azure Infrastructure
      run: azd provision --no-prompt
          
    - name: 🚀 Deploy Application
      id: deploy
      run: |
        # Déploiement avec azd
        azd deploy --no-prompt
        
        # Récupérer l'URL de l'application
        APP_URL=$(azd env get-values | grep AZURE_CONTAINER_APP_URL | cut -d'=' -f2 | tr -d '"' || echo "")
        
        if [ -z "$APP_URL" ]; then
          APP_URL="https://${{ env.AZURE_ENV_NAME }}-chatbot-app.azurecontainerapps.io"
        fi
        
        echo "uri=$APP_URL" >> $GITHUB_OUTPUT
        echo "🎉 Application déployée avec succès!"
        echo "🌐 URL: $APP_URL"
        
    - name: 🔍 Health Check
      run: |
        APP_URL="${{ steps.deploy.outputs.uri }}"
        echo "🔍 Test de l'application à: $APP_URL"
        
        # Attendre que l'application démarre
        sleep 60
        
        # Test basique
        if curl -f -m 30 "$APP_URL" > /dev/null 2>&1; then
          echo "✅ Application accessible!"
        else
          echo "⚠️ Application en cours de démarrage..."
        fi

  #============================================================================
  # Job 4: Tests d'Intégration
  #============================================================================
  integration-tests:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name != 'pull_request'
    
    steps:
    - name: 🧪 Basic Integration Test
      env:
        APP_URL: ${{ needs.deploy.outputs.uri }}
      run: |
        echo "🧪 Test de l'application déployée: $APP_URL"
        
        # Test simple de connectivité
        if curl -f -m 30 "$APP_URL" > /dev/null 2>&1; then
          echo "✅ Test d'intégration réussi!"
        else
          echo "⚠️ Test d'intégration échoué - l'application est peut-être encore en cours de démarrage"
          exit 1
        fi

  #============================================================================  
  # Job 5: Nettoyage
  #============================================================================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [test, build, deploy, integration-tests]
    if: always()
    
    steps:
    - name: 📢 Deployment Status
      run: |
        if [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "🎉 Déploiement réussi!"
          echo "🌐 Application URL: ${{ needs.deploy.outputs.uri }}"
        else
          echo "❌ Échec du déploiement"
        fi
