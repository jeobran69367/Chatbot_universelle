#!/usr/bin/env python3
"""
Script de test simple pour v√©rifier l'installation et la configuration du chatbot.
"""

import sys
import os
from pathlib import Path

# Ajouter le chemin des modules
sys.path.append(str(Path(__file__).parent / "src"))

def test_imports():
    """Tester l'importation des modules."""
    print("üß™ Test des importations...")
    
    try:
        print("  ‚úì Streamlit...", end=" ")
        import streamlit as st
        print("OK")
    except ImportError as e:
        print(f"‚ùå ERREUR: {e}")
        return False
    
    try:
        print("  ‚úì Requests...", end=" ")
        import requests
        print("OK")
    except ImportError as e:
        print(f"‚ùå ERREUR: {e}")
        return False
    
    try:
        print("  ‚úì BeautifulSoup...", end=" ")
        from bs4 import BeautifulSoup
        print("OK")
    except ImportError as e:
        print(f"‚ùå ERREUR: {e}")
        return False
    
    try:
        print("  ‚úì OpenAI...", end=" ")
        import openai
        print("OK")
    except ImportError as e:
        print(f"‚ùå ERREUR: {e}")
        return False
    
    try:
        print("  ‚úì Numpy...", end=" ")
        import numpy
        print("OK")
    except ImportError as e:
        print(f"‚ùå ERREUR: {e}")
        return False
    
    try:
        print("  ‚úì ChromaDB...", end=" ")
        import chromadb
        print("OK")
    except ImportError as e:
        print(f"‚ùå ERREUR: {e}")
        return False
    
    try:
        print("  ‚úì Sentence Transformers...", end=" ")
        from sentence_transformers import SentenceTransformer
        print("OK")
    except ImportError as e:
        print(f"‚ùå ERREUR: {e}")
        return False
    
    print("‚úÖ Tous les modules import√©s avec succ√®s!")
    return True

def test_modules():
    """Tester l'importation de nos modules personnalis√©s."""
    print("\nüì¶ Test des modules personnalis√©s...")
    
    try:
        print("  ‚úì Web Scraper...", end=" ")
        from web_scraper import WebScraper
        print("OK")
    except Exception as e:
        print(f"‚ùå ERREUR: {e}")
        return False
    
    try:
        print("  ‚úì Vector Database...", end=" ")
        from vector_database import VectorDatabase
        print("OK")
    except Exception as e:
        print(f"‚ùå ERREUR: {e}")
        return False
    
    try:
        print("  ‚úì Chatbot...", end=" ")
        from chatbot import ChatBot
        print("OK")
    except Exception as e:
        print(f"‚ùå ERREUR: {e}")
        return False
    
    print("‚úÖ Tous les modules personnalis√©s import√©s avec succ√®s!")
    return True

def test_configuration():
    """Tester la configuration."""
    print("\n‚öôÔ∏è Test de la configuration...")
    
    try:
        print("  ‚úì Configuration...", end=" ")
        from config.settings import OPENAI_API_KEY, PAGE_TITLE
        print("OK")
    except Exception as e:
        print(f"‚ùå ERREUR: {e}")
        return False
    
    # V√©rifier les dossiers
    print("  ‚úì Dossiers de donn√©es...", end=" ")
    from config.settings import DATA_DIR, SCRAPED_DATA_DIR, EMBEDDINGS_DIR
    
    if DATA_DIR.exists():
        print("OK")
    else:
        print(f"‚ùå Dossier manquant: {DATA_DIR}")
        return False
    
    print("‚úÖ Configuration valid√©e!")
    return True

def test_environment():
    """Tester les variables d'environnement."""
    print("\nüîê Test des variables d'environnement...")
    
    # Charger le fichier .env
    try:
        from python_dotenv import load_dotenv
        load_dotenv()
        print("  ‚úì Fichier .env charg√©")
    except Exception as e:
        print(f"  ‚ö†Ô∏è  Erreur lors du chargement .env: {e}")
    
    # V√©rifier la cl√© OpenAI
    openai_key = os.getenv("OPENAI_API_KEY")
    if openai_key and openai_key != "your_openai_api_key_here":
        print("  ‚úÖ Cl√© OpenAI configur√©e")
    else:
        print("  ‚ö†Ô∏è  Cl√© OpenAI non configur√©e (utiliser votre vraie cl√© pour les tests complets)")
    
    return True

def run_basic_functionality_test():
    """Test basique de fonctionnalit√©."""
    print("\nüöÄ Test basique de fonctionnalit√©...")
    
    try:
        from vector_database import VectorDatabase
        print("  ‚úì Initialisation de la base vectorielle...", end=" ")
        vector_db = VectorDatabase("chroma")
        print("OK")
        
        # Test d'info
        print("  ‚úì Informations de la base...", end=" ")
        info = vector_db.get_database_info()
        print(f"OK (Type: {info['db_type']})")
        
    except Exception as e:
        print(f"‚ùå ERREUR: {e}")
        return False
    
    print("‚úÖ Tests de base r√©ussis!")
    return True

def main():
    """Fonction principale de test."""
    print("ü§ñ Test du Chatbot Web Scraper")
    print("=" * 50)
    
    all_tests_passed = True
    
    # Tests
    if not test_imports():
        all_tests_passed = False
    
    if not test_modules():
        all_tests_passed = False
    
    if not test_configuration():
        all_tests_passed = False
    
    if not test_environment():
        all_tests_passed = False
    
    if not run_basic_functionality_test():
        all_tests_passed = False
    
    # R√©sultat final
    print("\n" + "=" * 50)
    if all_tests_passed:
        print("üéâ Tous les tests sont pass√©s avec succ√®s!")
        print("\nüìã Prochaines √©tapes:")
        print("1. Configurez votre cl√© OpenAI dans le fichier .env")
        print("2. Lancez l'application: streamlit run app.py")
        print("3. Ou testez les exemples: python example.py")
    else:
        print("‚ùå Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
    
    return all_tests_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
